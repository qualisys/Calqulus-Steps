import test from 'ava';

import { f32, mockStep } from '../../../test-utils/mock-step';
import { Signal } from '../../models/signal';

import { IntegralStep } from './integral';

// Input signals
const s1 = new Signal(f32(1, 2, 3, 4, 5), 0.5);
const s2 = new Signal(f32(1, 1, 1, 1, 1));

const sCycles = new Signal(f32(1, 1, 1, 1, 1, 1, 1, 1, 1), 0.5);
sCycles.cycles = [{ start: 1, end: 3 }, { start: 5, end: 7 }]; 

const signal = new Signal(f
const signalRes = f32(0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,-0.000005,-0.000027,-0.000081,-0.000179,-0.000323,-0.000499,-0.000681,-0.000848,-0.000990,-0.001107,-0.001209,-0.001305,-0.001396,-0.001474,-0.001527,-0.001547,-0.001532,-0.001486,-0.001415,-0.001321,-0.001203,-0.001063,-0.000901,-0.000723,-0.000531,-0.000328,-0.000116,0.000103,0.000328,0.000558,0.000796,0.001042,0.001293,0.001548,0.001800,0.002045,0.002280,0.002503,0.002714,0.002915,0.003108,0.003294,0.003475,0.003653,0.003828,0.004002,0.004174,0.004345,0.004512,0.004675,0.004832,0.004983,0.005129,0.005271,0.005408,0.005543,0.005676,0.005808,0.005941,0.006077,0.006216,0.006360,0.006509,0.006661,0.006818,0.006979,0.007144,0.007311,0.007481,0.007652,0.007824,0.007997,0.008172,0.008350,0.008531,0.008716,0.008909,0.009112,0.009331,0.009569,0.009823,0.010084,0.010345,0.010603,0.010857,0.011107,0.011351,0.011590,0.011825,0.012058,0.012294,0.012535,0.012781,0.013034,0.013293,0.013555,0.013820,0.014088,0.014358,0.014631,0.014904,0.015177,0.015449,0.015716,0.015979,0.016235,0.016484,0.016722,0.016947,0.017158,0.017351,0.017526,0.017679,0.017808,0.017911,0.017986,0.018033,0.018054,0.018049,0.018022,0.017979,0.017926,0.017868,0.017813,0.017766,0.017731,0.017708,0.017697,0.017698,0.017707,0.017723,0.017743,0.017766,0.017790,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802,0.017802);

// Helper for asserting the 'signal' data example
const veryNear = (valueA, valueB) => Math.abs(valueA - valueB) < 0.0001;

test('IntegralStep - Input errors ', async(t) => {
	// No input
	const step1 = mockStep(IntegralStep, []);
	await t.throwsAsync(step1.process());

	// More than one input 
	const step2 = mockStep(IntegralStep, [s1, s2]);
	await t.throwsAsync(step2.process());

	// Missing frameRate
	const step3 = mockStep(IntegralStep, [s2]);
	await t.throwsAsync(step3.process());
});

test('IntegralStep - metric integral, without cycles ', async(t) => {
	const step = mockStep(IntegralStep, [s1], { scalar: true, useCycles: false });
	const res = await step.process();

	t.deepEqual(res.getValue(), f32(24));
});

test('IntegralStep - metric integral, with cycles ', async(t) => {
	const step = mockStep(IntegralStep, [sCycles], { scalar: true });
	
	const res = await step.process();
	t.deepEqual(res.getValue(), f32(4, 4));
});

test('IntegralStep - metric integral, ignoring cycles ', async(t) => {
	const step = mockStep(IntegralStep, [sCycles], { scalar: true, useCycles: false });

	const res = await step.process();
	t.deepEqual(res.getValue(), f32(16));
});

test('IntegralStep - integral series, ignoring cycles', async(t) => {
	const step = mockStep(IntegralStep, [sCycles], { useCycles: false });
	const res = await step.process();
	t.deepEqual(res.getValue(), f32(0, 2, 4, 6, 8, 10, 12, 14, 16));
});

test('IntegralStep - integral series with cycles', async(t) => {
	const step = mockStep(IntegralStep, [sCycles]);
	const res = await step.process();

	t.deepEqual(res.array, [f32(0, 0, 2, 4, 0, 0, 2, 4, 0)]);
});

test('IntegralStep - integral series, without cycles', async(t) => {
	const step = mockStep(IntegralStep, [signal], { useCycles: false });
	const res = await step.process();

	t.assert(res.getFloat32ArrayValue().every((r, i) => veryNear(r, signalRes[i])));
});